getwd()
setwd("C:\Users\Ruthesan-PC\Desktop\Ubiqum_class\R_studio\")
setwd("C:\Users\Ruthesan-PC\Desktop\Ubiqum_class\R_studio")
setwd("C:/Users/Ruthesan-PC/Desktop/Ubiqum_class/R_studio")
data <- read.csv("/R Tutorial Data/R Tutorial Data Sets/cars")
data <- read.csv("/R Tutorial Data/R Tutorial Data Sets/cars.csv")
?read.csv
setwd("C:/Users/Ruthesan-PC/Desktop/Ubiqum_class/R_studio/R Tutorial Data\R Tutorial Data Sets")
setwd("C:/Users/Ruthesan-PC/Desktop/Ubiqum_class/R_studio/R Tutorial Data/R Tutorial Data Sets")
data <- read.csv(cars)
data <- read.csv("cars", sep",")
data1 <- read.csv("cars", sep",")
data1 <- read.csv(cars, sep",")
list.files()
db <- read.csv(file=cars)
install.packages("readr")
library("readr", lib.loc="~/R/win-library/3.3")
db <- read.csv("cars.csv")
View(db)
View(db)
View(db)
names(bd)
colnames(db)
Ntrain <- round(nrow(db)*0.7)
Ntest <- nrow(db)-Ntrain
training_indices<-sample(seq_len(nrow(DatasetName)),size =trainSize)
trainSet<-existing[training_indices,]
testSet<-existing[-training_indices,]
training_indices<-sample(seq_len(nrow(db)),size =Ntrain)
?seq_len
?sample
t<-seq_len(nrow(db)),size =Ntrain
seq_len(10)
sample(10, 2)
trainSet<-existing[training_indices,]
testSet<-existing[-training_indices,]
?existing
trainSet<-existing[training_indices,]
trainSet<-db[training_indices,]
testSet<-db[-training_indices,]
colnames(db)
car_predict <- lm(db$speed.of.car ~ db$distance.of.car, trainSet)
summary(car_predict)
car_prediction <- predict(car_predict, testSet)
save.image("C:/Users/Ruthesan-PC/Desktop/Ubiqum_class/R_studio/R Tutorial Data/R Tutorial Data Sets/cars.RData")
install.packages("readr)
library(readr)
IrisDataset <- read.csv(iris.csv)
attributes(IrisDataset)
summary(risDataset)
str(IrisDatasets)
names(IrisDataset)
hist(IrisDataset$Species)
plot(IrisDataset$Sepal.Length
qqnorm(IrisDataset)
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.2)
testSize <- nrow(IrisDataset) - trainSet
trainSizes
testSize
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
set.seed(405)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length)
summary(LinearModel)
prediction<-predict(LinearModeltestSet)
predictions
IrisDataset <- read.csv(iris.csv)
IrisDataset <- read.csv("iris.csv")
View(IrisDataset)
IrisDataset <- IrisDataset[150,2:6]
View(IrisDataset)
View(IrisDataset)
IrisDataset <- read.csv("iris.csv")
IrisDataset <- IrisDataset[1:150,2:6]
?attributes
attributes(IrisDataset)
summary(risDataset)
str(IrisDatasets)
IrisDataset <- read.csv("iris.csv")
IrisDataset <- IrisDataset[1:150,2:6]
attributes(IrisDataset)
summary(IrisDataset)
str(IrisDatasets)
names(IrisDataset)
hist(IrisDataset$Species)
plot(IrisDataset$Sepal.Length
qqnorm(IrisDataset)
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.2)
testSize <- nrow(IrisDataset) - trainSet
trainSizes
testSize
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
set.seed(405)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length)
summary(LinearModel)
prediction<-predict(LinearModeltestSet)
predictions
summary(IrisDataset)
?str
names(IrisDataset)
str(IrisDatasets)
str(IrisDataset)
?hist
hist(IrisDataset$Species)
plot(IrisDataset$Sepal.Length)
?qnorm
qnorm(IrisDataset)
summary(IrisDataset$Species)
View(IrisDataset)
qqnorm
qqnorm(IrisDataset)
?qqnorm
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.8)
testSize <- nrow(IrisDataset) - trainSet
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
nrow(IrisDataset)
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.8)
testSize <- nrow(IrisDataset) - trainSet
testSize <- nrow(IrisDataset) - trainSize
seq_len(30)
sample(seq_len(30), nrow(IrisDataset))
nrow(IrisDataset)
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
attributes(IrisDataset)
summary(IrisDataset)
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length)
LinearModel<- lm(trainSet$Petal.Width ~ trainSet$Petal.Length)
summary(LinearModel)
prediction<-predict(LinearModel, testSet)
df <- prediction
df <- data.frame(df)
View(df)
?lm
?predict
testset1 <- testSet
testSet <- testSet[,4]
prediction<-predict(LinearModel, testSet)
IrisDataset <- read.csv("iris.csv")
IrisDataset <- IrisDataset[1:150,2:6]
attributes(IrisDataset)
summary(IrisDataset)
str(IrisDataset)
names(IrisDataset)
hist(IrisDataset$Species)
plot(IrisDataset$Sepal.Length)
qqnorm(IrisDataset)
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.8)
testSize <- nrow(IrisDataset) - trainSize
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
# set.seed(405)
#
# trainSet <- IrisDataset[training_indices, ]
#
# testSet <- IrisDataset[-training_indices, ]
LinearModel<- lm(trainSet$Petal.Width ~ trainSet$Petal.Length)
summary(LinearModel)
prediction<-predict(LinearModel, testSet)
predictions
df <- read.csv("cars.csv")
View(df)
View(df)
colnames(df)
colnames(df) <- c("Names","Speed","Distance")
colnames(df)
str(df)
is.na(df)
set.seed(123)
trainsize <- round(nrow(df)*0.7)
testsize <- nrow(df) - trainsize
train_indices <- sample(seq_len(nrow(df)),trainsize)
trainset <- df[train_indices,]
testset <- df[-train_indices,]
cars_model <- lm(Distance ~ Speed, df)
summery(cars_model)
summary(cars_model)
PredictionsName <- predict(cars_model,testSet)
testset
cars_model <- lm(Distance ~ Speed, df)
predict(cars_model,testSet)
prediction <- predict(cars_model,testSet)
View(testset)
View(df)
View(trainset)
View(df)
predict.lm(cars_model,testSet)
prediction <- predict(cars_model,trainset)
prediction
trainset$Distance
trainset$Speed
prediction <- predict(cars_model,testset)
View(testset)
prediction
cars_model <- lm(Distance ~ Speed, trainset)
summary(cars_model)
prediction <- predict(cars_model,testset)
prediction
plot(df$Speed,df$Distance, type = p)
plot(df$Speed,df$Distance, type = "p")
plot(df$Distance,df$Speed, type = "p", xlab = "Distance", ylab = "Speed")
install.packages("ggplot2")
library(ggplot2)
ggplot(NULL, aes(Distance,Speed))+geom_point(df)+geom_point(testset)
?ggplot
pre <- data.frame(prediction)
pre <- pre[,2]
pre <- testset[,2]
View(testset)
pre[Distance] <- prediction
pre <- data.frame(1:15,1:2)
pre <- testset[,2]
pre <- data.frame(testset[,2])
pre[,2] <- prediction
colnames(pre)
colnames(pre) <- c("Speed","Distance")
ggplot(NULL, aes("Distance", "Speed"))+geom_point(df)
ggplot(df, aes("Distance", "Speed"))+geom_point()
ggplot(df, aes("Distance", "Speed"))+geom_points()
p <- ggplot(df, aes("Distance", "Speed"))+geom_points()
p <- ggplot(df, aes("Distance", "Speed"))+geom_point()
p
ggplot(NULL, aes("Distance", "Speed"))+geom_point(data = df)
ggplot(NULL, aes("Distance", "Speed"))+geom_point(data = df)+geom_point(data=pre)
?geom
ggplot(NULL, aes("Distance", "Speed"))+geom_point(data = df)+geom_point(data=pre)
ggplot(NULL, aes("Distance", "Speed"))+geom_point(data = df)+geom_dotplot(data=pre)
ggplot(NULL, aes("Distance", "Speed"),xlim(0,100))+geom_point(data = df)+geom_dotplot(data=pre)
ggplot()+geom_point(df, aes("Distance","Speed", color="black"))+geom_point(pre,aes("Distance", "Speed", color="red"))
View(pre)
str(pre)
pre$Distance <- round(pre$Distance)
str(pre)
pre$Distance <- integer(pre$Distance)
pre$Distance <- as.integer(pre$Distance)
str(pre)
ggplot()+geom_point(df, aes("Distance","Speed", color="black"))+geom_point(pre,aes("Distance", "Speed", color="red"))
ggplot()+geom_point(df, aes("Distance","Speed"), color="black")+geom_point(pre,aes("Distance", "Speed"), color="red")
?ggplot
ggplot()+geom_point(testset, aes("Distance","Speed"), color="black")+geom_point(pre,aes("Distance", "Speed"), color="red")
ggplot()+geom_point(testset, aes(x=Distance,y=Speed), color="black")+geom_point(pre,aes(x=Distance, y=Speed), color="red")
pre[,"xx"] <- prediction
pre <- pre[,1:2]
ggplot()+geom_abline(aes(x=1:5, y=6:10))
ggplot()+geom_abline(aes(x=1:5, y=2*x))
ggplot()+geom_abline(aes(x=1:5, y=2*1:5))
print(pre)
print(testset)
install.packages("tidyverse")
ggplot(pre, aes(x=Distance, y=Speed))+ geom_point()
plotDF <- merge(testset[,2:3],pre, by=Speed)
plotDF <- merge(testset[,2:3],pre, by="Speed")
plotDF
View(plotDF)
remove(plotDF)
ggplot()+geom_point(pre,aes(x=Distance, y=Speed, color="blue"))+geom_point(testset, aes(x=Distance, y=Speed, color="red"))
ggplot()+geom_point(pre,aes(x=Distance, y=Speed, color="blue"))
ggplot(pre, aes(x=Distance, y=Speed))+ geom_point()+geom_point(data=testset, color="red")
ggplot(pre, aes(x=Distance, y=Speed))+ geom_line()+geom_line(data=testset, color="red")
ggplot(pre, aes(x=Distance, y=Speed))+ geom_line()+geom_line(data=df, color="red")
ggplot(pre, aes(x=Distance, y=Speed))+ geom_line()+geom_line(data=df, color="red")+themr()
ggplot(pre, aes(x=Distance, y=Speed))+ geom_line()+geom_line(data=df, color="red")+theme()
ggplot(pre, aes(x=Distance, y=Speed))+ geom_line()+geom_line(data=df, color="red")+geom_point()
ggplot(pre, aes(x=Distance, y=Speed))+ geom_line()+geom_point()+geom_line(data=df, color="red")+geom_point()
ggplot(pre, aes(x=Distance, y=Speed))+ geom_line()+geom_point()
ggplot()+geom_point(pre,aes(x=Distance, y=Speed, color="blue"))+geom_point(testset, aes(x=Distance, y=Speed, color="red"))
ggplot(pre, aes(x=Distance, y=Speed))+ geom_line()+geom_point()+geom_line(data=df, color="red")+geom_point()
MAPE <- mean((((testset$Distance-pre$Distance)/testset$Distance)-1)*100)
MAPE <- (((testset$Distance-pre$Distance)/testset$Distance)-1)*100
MAPE
save.image("C:/Users/Ruthesan-PC/Desktop/Ubiqum_class/R_studio/R Tutorial Data/R Tutorial Data Sets/cars.RData")
IrisDataset <- read.csv("iris.csv")
IrisDataset <- IrisDataset[1:150,2:6]
attributes(IrisDataset)
summary(IrisDataset)
IrisDataset <- read.csv("iris.csv")
IrisDataset <- IrisDataset[1:150,2:6]
attributes(IrisDataset)
summary(IrisDataset)
str(IrisDataset)
names(IrisDataset)
hist(IrisDataset$Species)
plot(IrisDataset$Sepal.Length)
qqnorm(IrisDataset)
IrisDataset$Species<- as.numeric(IrisDataset$Species)
qqnorm(IrisDataset)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.8)
testSize <- nrow(IrisDataset) - trainSize
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
LinearModel<- lm(Petal.Width ~ Petal.Length, trainset)
summary(LinearModel)
LinearModel<- lm(Petal.Width ~ Petal.Length, trainset)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.8)
testSize <- nrow(IrisDataset) - trainSize
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
LinearModel<- lm(Petal.Width ~ Petal.Length, trainset)
trainset <- IrisDataset[training_indices, ]
LinearModel<- lm(Petal.Width ~ Petal.Length, trainset)
summary(LinearModel)
prediction<-predict(LinearModel, testSet)
prediction
testSet$Petal.Length
testSet$Petal.Width
ggplot()+geom_point(prediction)
ggplot()+geom_point(y=prediction)
ggplot()+geom_point(y=prediction, x=1:30)
ggplot(testSet, aes(x=1:nrow(testSet),y=petal.Width))+geom_point()
testSet$Petal.Width
ggplot(testSet, aes(x=1:nrow(testSet),y=petal.width))+geom_point()
ggplot(testSet, aes(x=1:nrow(testSet),y=Petal.Width))+geom_point()
ggplot(testSet, aes(x=1:nrow(testSet),y=Petal.Width))+geom_point()+geom_point(aes(y=prediction), color="red")
ggplot(testSet, aes(x=1:nrow(testSet),y=Petal.Width), xlab("Index), ylab("Petal Width"))+geom_point()+geom_point(aes(y=prediction), color="red")
ggplot(testSet, aes(x=1:nrow(testSet),y=Petal.Width), xlab="Index, ylab="Petal Width")+geom_point()+geom_point(aes(y=prediction), color="red")
ggplot(testSet, aes(x=1:nrow(testSet),y=Petal.Width))+geom_point()+geom_point(aes(y=prediction), color="red")+ labs(x="Index", y="Petal Width")
save.image("C:/Users/Ruthesan-PC/Desktop/Ubiqum_class/R_studio/R Tutorial Data/R Tutorial Data Sets/iris.RData")
install.packages("xlsx")
library(xlsx)
getwd()
setwd("C:/Users/Ruthesan-PC/Desktop/Ubiqum_class/R_studio/R Tutorial Data/R Tutorial Data Sets/Task_2")
setwd("C:/Users/Ruthesan-PC/Desktop/Ubiqum_class/R_studio/R Tutorial Data/R Tutorial Data Sets/Task_2/")
read.xlsx("/Task_2/Survey_Key_and_Complete_Responses", sheetName = "Survey Results Complete")
